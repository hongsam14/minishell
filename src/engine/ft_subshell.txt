
#include "head.h"

int ft_start(t_built *built, t_list *env_list)
{
	int	status;
	status = 1;
	if (pipe(g_mini.pip) < 0)
		status = ERROR;
	// dup2 (g_mini.pip[1], STDOUT);
	ft_close(g_mini.pip[1]);
	g_mini.pip[0] = STDIN;
	while (built)
	{
		if (built->next && built->next->command->str[0] == '|')
		{

			while (built)
			{
				// fprintf(stderr, "in\n");
				// fprintf(stderr, "g[%d]s[%d]\n", g_mini.pip[0], g_mini.pip[1]);

				if (!built->next || (built->next && built->next->command->str[0] != '|'))
					break ;
				status = ft_subshell(built, env_list);
				// fprintf(stderr, "end\n");
				built = built->next;
			}
				fprintf(stderr, "last\n");
				dup2(STDOUT, g_mini.pip[1]);
									// int i = 0;
									// char *line;
									// while (i < 3)
									// {
									// 	fprintf(stderr, "%d[",i++);
									// 	ft_putnbr_fd(get_next_line(g_mini.pip[0], &line), 2, 0);
									// 	fprintf(stderr, "%s]\n", line);
									// }
			ft_execute(built, env_list);
			built = built->next;

		}
		else
		{
			status = ft_execute(built, env_list);
			built = built->next;
		}
	}

	return (status);
}

int	ft_subshell(t_built *built, t_list *env_list)
{
	int	status;
	int	fd[2];
	int	w_status;
	pid_t	pid;
	pid_t	w_pid;
	pid = fork();
	if (pipe(fd) < 0)
	{
		perror("pipeerror");
		return (ERROR);
	}
	// fprintf(stderr, "gu[%d][%d] | fd[%d][%d]\n", g_mini.pip[0], g_mini.pip[1], fd[0], fd[1]);
	// dup2 (g_mini.pip[0], fd[0]);
	if (pid < 0)
	{
		perror("forkerror");
		return (ERROR);
	}
	if (pid == 0) //자식
	{
		// dup2(g_mini.pip[0], STDIN);
									// int i = 0;
									// char *line;
									// while (i < 3)
									// {
									// 	fprintf(stderr, "%d[",i++);
									// 	ft_putnbr_fd(get_next_line(g_mini.pip[0], &line), 2, 0);
									// 	fprintf(stderr, "%s]\n", line);
									// }
		dup2(fd[1], STDOUT);
		ft_close(fd[1]);
		ft_close(fd[0]);
		status = ft_execute(built, env_list);
		exit(status);
	}
	else // 부모
	{
		// fprintf(stderr, "gd[%d][%d] | fd[%d][%d]\n", g_mini.pip[0], g_mini.pip[1], fd[0], fd[1]);

		w_pid = waitpid(pid, &w_status, WUNTRACED);
		while (!WIFEXITED(w_status) && !WIFSIGNALED(status))
			w_pid = waitpid(pid, &w_status, WUNTRACED);
		ft_close(g_mini.pip[0]);
		// dup2(g_mini.pip[0], fd[0]);
		// g_mini.pip[0] = dup(fd[0]);
									// int i = 0;
									// char *line;
									// while (i < 3)
									// {
									// 	fprintf(stderr, "%d[",i++);
									// 	ft_putnbr_fd(get_next_line(g_mini.pip[0], &line), 2, 0);
									// 	fprintf(stderr, "%s]\n", line);
									// }
		// g_mini.pip[1] = dup(fd[1]);
		ft_close(fd[0]);
		ft_close(fd[1]);
		// fprintf(stderr, "endg[%d][%d] | fd[%d][%d]\n", g_mini.pip[0], g_mini.pip[1], fd[0], fd[1]);
	}
	return (w_status);
}

// sort | grep a | cat -e